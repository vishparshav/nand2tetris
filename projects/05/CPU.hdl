

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, the ALU executes the inputted instruction according
 * to the Hack machine language specification, as follows. 
 * The D and A in the language specification refer to CPU-resident registers,
 * while M refers to the memory register addressed by A, i.e. to Memory[A].
 * The inM input holds the value of this register. If the current instruction 
 * needs to write a value to M, the value is placed in outM, the address 
 * of the target register is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset == 1, then the 
 * CPU jumps to address 0 (i.e. sets pc = 0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

     PARTS:
    
	//checking for instruction type
	Or(a=instruction[15],b=false,out=insttype1);
	Not(in=insttype1,out=insttype);
	
	//preparing input for A register
	And16(a[15]=false,a[0..14]=true,b=instruction,out=Adata);
	
	
	
	//separating fields from C-instruction
	And(a=instruction[12],b=true,out=Ca);
	
	And(a=instruction[11],b=true,out=Cc1);
	And(a=instruction[10],b=true,out=Cc2);
	And(a=instruction[9],b=true,out=Cc3);
	And(a=instruction[8],b=true,out=Cc4);
	And(a=instruction[7],b=true,out=Cc5);
	And(a=instruction[6],b=true,out=Cc6);
	
	And(a=instruction[5],b=true,out=Cd1);
	And(a=instruction[4],b=true,out=Cd2);
	And(a=instruction[3],b=true,out=Cd3);
	
	And(a=instruction[2],b=true,out=Cj1);
	And(a=instruction[1],b=true,out=Cj2);
	And(a=instruction[0],b=true,out=Cj3);
	
	//setting destination load signals
	DMux8Way(in=true,sel[0]=Cd3,sel[1]=Cd2,sel[2]=Cd1,b=writeM1,c=Dload1,d=MDload,e=Aload1,f=AMload,g=ADload,h=AMDload);

	
	
	Or(a=false,b=MDload,out=writeM2);
	Or(a=false,b=MDload,out=Dload2);
           
	Or(a=false,b=AMload,out=writeM3);
	Or(a=false,b=AMload,out=Aload2);
             
	Or(a=false,b=ADload,out=Dload3);
	Or(a=false,b=ADload,out=Aload3);
             
	Or(a=false,b=AMDload,out=writeM4);
	Or(a=false,b=AMDload,out=Aload4);
	Or(a=false,b=AMDload,out=Dload4);

	Or8Way(in[0]=writeM1,in[1]=writeM2,in[2]=writeM3,in[3]=writeM4,in[4..7]=false,out=writeMx);
	
	
	Or8Way(in[0]=Dload1,in[1]=Dload2,in[2]=Dload3,in[3]=Dload4,in[4..7]=false,out=Dloadx);
	
	Or8Way(in[0]=Aload1,in[1]=Aload2,in[2]=Aload3,in[3]=Aload4,in[4..7]=false,out=Aloadcx);
	
	And(a=insttype1,b=writeMx,out=writeM);
	And(a=insttype1,b=Dloadx,out=Dload);
	And(a=insttype1,b=Aloadcx,out=Aloadc);
	
	Mux16(a=Aout,b=inM,sel=Ca,out=AorM);
	ALU(zx=Cc1,nx=Cc2,zy=Cc3,ny=Cc4,f=Cc5,no=Cc6,x=Dout,y=AorM,out=result);
	
	Mux16(b=result,sel=Dload,out=Din);
	
	
	
	
	Mux(a=false,b=true,sel=insttype,out=Aloada);
	Or(a=Aloada,b=Aloadc,out=Aload);
	
	Mux4Way16(c=result,b=Adata,a=Aout,sel[0]=Aloada,sel[1]=Aloadc,out=Ain);
	
	
	ARegister(in=Ain,load=Aload,out=Aout,out[0..14]=addressM);
	DRegister(in=Din,load=Dload,out=Dout);
	And(a=insttype1,b=writeMx,out=writeMxx);
	Mux16(b=result,sel=writeMxx,out=outM);
	
	
	And16(a=result,b=true,out[15]=resNg);
	Not(in=resNg,out=resPs);
	
	
	Or16(a=result,b=false,out[0..7]=orout1,out[8..15]=orout2);
	Or8Way(in=orout1,out=zout1);
	Or8Way(in=orout2,out=zout2);
	Or(a=zout1,b=zout2,out=resNZr);
	Not(in=resNZr,out=resZr);
	And(a=resNZr,b=resPs,out=resGZr);
	
	Or(a=resNg,b=resZr,out=resLEZr);
	Or(a=resZr,b=resGZr,out=resGEZr);
	//Or(a=resNg,b=resGZr,out=resNZr);
	
	DMux8Way(in=true,a=nojmp,b=resGZrx,c=resZrx,d=resGEZrx,e=resNgx,f=resNZrx,g=resLEZrx,h=jmp7,sel[0]=Cj3,sel[1]=Cj2,sel[2]=Cj1);
	
	
	
	And(a=resGZrx,b=resGZr,out=jmp1);
	And(a=resZrx,b=resZr,out=jmp2);
	And(a=resGEZrx,b=resGEZr,out=jmp3);
	And(a=resNgx,b=resNg,out=jmp4);
	And(a=resNZrx,b=resNZr,out=jmp5);
	And(a=resLEZrx,b=resLEZr,out=jmp6);
	Not(in=nojmp,out=jmp0);
	
	Or8Way(in[0]=jmp1,in[1]=jmp2,in[2]=jmp3,in[3]=jmp4,in[4]=jmp5,in[5]=jmp6,in[7]=false,in[6]=jmp7,out=jmpx);
	And(a=jmpx,b=jmp0,out=jmpxx);
	
	And(a=insttype1,b=jmpxx,out=jmp);
	
	Not(in=jmp,out=incpc);
	
	
	
	PC(in=Aout,load=jmp,inc=incpc,reset=reset,out[0..14]=pc);
		
	
	
}
